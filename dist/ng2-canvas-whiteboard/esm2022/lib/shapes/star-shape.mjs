import { CanvasWhiteboardShape } from './canvas-whiteboard-shape';
import { CanvasWhiteboardPoint } from '../canvas-whiteboard-point.model';
export class StarShape extends CanvasWhiteboardShape {
    constructor(positionPoint, options, radius, spikes) {
        super(positionPoint, options);
        this.radius = radius || 0;
        this.spikes = spikes || 5;
    }
    getShapeName() {
        return 'StarShape';
    }
    draw(context) {
        Object.assign(context, this.options);
        let rotation = Math.PI / 2 * 3;
        let spikeX = this.positionPoint.x;
        let spikeY = this.positionPoint.y;
        const step = Math.PI / this.spikes;
        context.beginPath();
        context.moveTo(this.positionPoint.x, this.positionPoint.y - this.radius);
        for (let i = 0; i < this.spikes; i++) {
            spikeX = this.positionPoint.x + Math.cos(rotation) * this.radius;
            spikeY = this.positionPoint.y + Math.sin(rotation) * this.radius;
            context.lineTo(spikeX, spikeY);
            rotation += step;
            spikeX = this.positionPoint.x + Math.cos(rotation) * (this.radius * 0.4);
            spikeY = this.positionPoint.y + Math.sin(rotation) * (this.radius * 0.4);
            context.lineTo(spikeX, spikeY);
            rotation += step;
            context.stroke();
        }
        context.lineTo(this.positionPoint.x, this.positionPoint.y - this.radius);
        context.closePath();
        context.stroke();
        if (this.options.shouldFillShape) {
            context.fill();
        }
    }
    drawPreview(context) {
        this.positionPoint = new CanvasWhiteboardPoint(context.canvas.width / 2, context.canvas.height / 2);
        this.radius = this.calculateRadius(context.canvas.width - 2, context.canvas.height / 2);
        this.draw(context);
    }
    onUpdateReceived(update) {
        this.radius = this.calculateRadius(update.x, update.y);
    }
    calculateRadius(x, y) {
        return Math.sqrt(Math.pow(x - this.positionPoint.x, 2) + Math.pow(y - this.positionPoint.y, 2));
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3Rhci1zaGFwZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL3Byb2plY3RzL25nMi1jYW52YXMtd2hpdGVib2FyZC9zcmMvbGliL3NoYXBlcy9zdGFyLXNoYXBlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxxQkFBcUIsRUFBRSxNQUFNLDJCQUEyQixDQUFDO0FBRWxFLE9BQU8sRUFBRSxxQkFBcUIsRUFBRSxNQUFNLGtDQUFrQyxDQUFDO0FBR3pFLE1BQU0sT0FBTyxTQUFVLFNBQVEscUJBQXFCO0lBSWxELFlBQVksYUFBcUMsRUFDckMsT0FBc0MsRUFDdEMsTUFBZSxFQUNmLE1BQWU7UUFDekIsS0FBSyxDQUFDLGFBQWEsRUFBRSxPQUFPLENBQUMsQ0FBQztRQUM5QixJQUFJLENBQUMsTUFBTSxHQUFHLE1BQU0sSUFBSSxDQUFDLENBQUM7UUFDMUIsSUFBSSxDQUFDLE1BQU0sR0FBRyxNQUFNLElBQUksQ0FBQyxDQUFDO0lBQzVCLENBQUM7SUFFRCxZQUFZO1FBQ1YsT0FBTyxXQUFXLENBQUM7SUFDckIsQ0FBQztJQUVELElBQUksQ0FBQyxPQUFpQztRQUNwQyxNQUFNLENBQUMsTUFBTSxDQUFDLE9BQU8sRUFBRSxJQUFJLENBQUMsT0FBTyxDQUFDLENBQUM7UUFFckMsSUFBSSxRQUFRLEdBQUcsSUFBSSxDQUFDLEVBQUUsR0FBRyxDQUFDLEdBQUcsQ0FBQyxDQUFDO1FBQy9CLElBQUksTUFBTSxHQUFHLElBQUksQ0FBQyxhQUFhLENBQUMsQ0FBQyxDQUFDO1FBQ2xDLElBQUksTUFBTSxHQUFHLElBQUksQ0FBQyxhQUFhLENBQUMsQ0FBQyxDQUFDO1FBQ2xDLE1BQU0sSUFBSSxHQUFHLElBQUksQ0FBQyxFQUFFLEdBQUcsSUFBSSxDQUFDLE1BQU0sQ0FBQztRQUVuQyxPQUFPLENBQUMsU0FBUyxFQUFFLENBQUM7UUFDcEIsT0FBTyxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsYUFBYSxD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aGFwZSB9IGZyb20gJy4vY2FudmFzLXdoaXRlYm9hcmQtc2hhcGUnO1xuaW1wb3J0IHsgQ2FudmFzV2hpdGVib2FyZFNoYXBlT3B0aW9ucyB9IGZyb20gJy4vY2FudmFzLXdoaXRlYm9hcmQtc2hhcGUtb3B0aW9ucyc7XG5pbXBvcnQgeyBDYW52YXNXaGl0ZWJvYXJkUG9pbnQgfSBmcm9tICcuLi9jYW52YXMtd2hpdGVib2FyZC1wb2ludC5tb2RlbCc7XG5pbXBvcnQgeyBDYW52YXNXaGl0ZWJvYXJkVXBkYXRlIH0gZnJvbSAnLi4vY2FudmFzLXdoaXRlYm9hcmQtdXBkYXRlLm1vZGVsJztcblxuZXhwb3J0IGNsYXNzIFN0YXJTaGFwZSBleHRlbmRzIENhbnZhc1doaXRlYm9hcmRTaGFwZSB7XG4gIHJhZGl1czogbnVtYmVyO1xuICBzcGlrZXM6IG51bWJlcjtcblxuICBjb25zdHJ1Y3Rvcihwb3NpdGlvblBvaW50PzogQ2FudmFzV2hpdGVib2FyZFBvaW50LFxuICAgICAgICAgICAgICBvcHRpb25zPzogQ2FudmFzV2hpdGVib2FyZFNoYXBlT3B0aW9ucyxcbiAgICAgICAgICAgICAgcmFkaXVzPzogbnVtYmVyLFxuICAgICAgICAgICAgICBzcGlrZXM/OiBudW1iZXIpIHtcbiAgICBzdXBlcihwb3NpdGlvblBvaW50LCBvcHRpb25zKTtcbiAgICB0aGlzLnJhZGl1cyA9IHJhZGl1cyB8fCAwO1xuICAgIHRoaXMuc3Bpa2VzID0gc3Bpa2VzIHx8IDU7XG4gIH1cblxuICBnZXRTaGFwZU5hbWUoKTogc3RyaW5nIHtcbiAgICByZXR1cm4gJ1N0YXJTaGFwZSc7XG4gIH1cblxuICBkcmF3KGNvbnRleHQ6IENhbnZhc1JlbmRlcmluZ0NvbnRleHQyRCk6IHZvaWQge1xuICAgIE9iamVjdC5hc3NpZ24oY29udGV4dCwgdGhpcy5vcHRpb25zKTtcblxuICAgIGxldCByb3RhdGlvbiA9IE1hdGguUEkgLyAyICogMztcbiAgICBsZXQgc3Bpa2VYID0gdGhpcy5wb3NpdGlvblBvaW50Lng7XG4gICAgbGV0IHNwaWtlWSA9IHRoaXMucG9zaXRpb25Qb2ludC55O1xuICAgIGNvbnN0IHN0ZXAgPSBNYXRoLlBJIC8gdGhpcy5zcGlrZXM7XG5cbiAgICBjb250ZXh0LmJlZ2luUGF0aCgpO1xuICAgIGNvbnRleHQubW92ZVRvKHRoaXMucG9zaXRpb25Qb2ludC54LCB0aGlzLnBvc2l0aW9uUG9pbnQueSAtIHRoaXMucmFkaXVzKTtcblxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdGhpcy5zcGlrZXM7IGkrKykge1xuICAgICAgc3Bpa2VYID0gdGhpcy5wb3NpdGlvblBvaW50LnggKyBNYXRoLmNvcyhyb3RhdGlvbikgKiB0aGlzLnJhZGl1cztcbiAgICAgIHNwaWtlWSA9IHRoaXMucG9zaXRpb25Qb2ludC55ICsgTWF0aC5zaW4ocm90YXRpb24pICogdGhpcy5yYWRpdXM7XG4gICAgICBjb250ZXh0LmxpbmVUbyhzcGlrZVgsIHNwaWtlWSk7XG4gICAgICByb3RhdGlvbiArPSBzdGVwO1xuXG4gICAgICBzcGlrZVggPSB0aGlzLnBvc2l0aW9uUG9pbnQueCArIE1hdGguY29zKHJvdGF0aW9uKSAqICh0aGlzLnJhZGl1cyAqIDAuNCk7XG4gICAgICBzcGlrZVkgPSB0aGlzLnBvc2l0aW9uUG9pbnQueSArIE1hdGguc2luKHJvdGF0aW9uKSAqICh0aGlzLnJhZGl1cyAqIDAuNCk7XG4gICAgICBjb250ZXh0LmxpbmVUbyhzcGlrZVgsIHNwaWtlWSk7XG4gICAgICByb3RhdGlvbiArPSBzdGVwO1xuICAgICAgY29udGV4dC5zdHJva2UoKTtcbiAgICB9XG5cbiAgICBjb250ZXh0LmxpbmVUbyh0aGlzLnBvc2l0aW9uUG9pbnQueCwgdGhpcy5wb3NpdGlvblBvaW50LnkgLSB0aGlzLnJhZGl1cyk7XG4gICAgY29udGV4dC5jbG9zZVBhdGgoKTtcblxuICAgIGNvbnRleHQuc3Ryb2tlKCk7XG5cbiAgICBpZiAodGhpcy5vcHRpb25zLnNob3VsZEZpbGxTaGFwZSkge1xuICAgICAgY29udGV4dC5maWxsKCk7XG4gICAgfVxuICB9XG5cbiAgZHJhd1ByZXZpZXcoY29udGV4dDogQ2FudmFzUmVuZGVyaW5nQ29udGV4dDJEKTogdm9pZCB7XG4gICAgdGhpcy5wb3NpdGlvblBvaW50ID0gbmV3IENhbnZhc1doaXRlYm9hcmRQb2ludChjb250ZXh0LmNhbnZhcy53aWR0aCAvIDIsIGNvbnRleHQuY2FudmFzLmhlaWdodCAvIDIpO1xuICAgIHRoaXMucmFkaXVzID0gdGhpcy5jYWxjdWxhdGVSYWRpdXMoY29udGV4dC5jYW52YXMud2lkdGggLSAyLCBjb250ZXh0LmNhbnZhcy5oZWlnaHQgLyAyKTtcbiAgICB0aGlzLmRyYXcoY29udGV4dCk7XG4gIH1cblxuICBvblVwZGF0ZVJlY2VpdmVkKHVwZGF0ZTogQ2FudmFzV2hpdGVib2FyZFVwZGF0ZSk6IHZvaWQge1xuICAgIHRoaXMucmFkaXVzID0gdGhpcy5jYWxjdWxhdGVSYWRpdXModXBkYXRlLngsIHVwZGF0ZS55KTtcbiAgfVxuXG4gIGNhbGN1bGF0ZVJhZGl1cyh4OiBudW1iZXIsIHk6IG51bWJlcik6IG51bWJlciB7XG4gICAgcmV0dXJuIE1hdGguc3FydChNYXRoLnBvdyh4IC0gdGhpcy5wb3NpdGlvblBvaW50LngsIDIpICsgTWF0aC5wb3coeSAtIHRoaXMucG9zaXRpb25Qb2ludC55LCAyKSk7XG4gIH1cbn1cbiJdfQ==