import { CanvasWhiteboardShape } from './canvas-whiteboard-shape';
import { CanvasWhiteboardPoint } from '../canvas-whiteboard-point.model';
export class RectangleShape extends CanvasWhiteboardShape {
    constructor(positionPoint, options, width, height) {
        super(positionPoint, options);
        this.width = width || 0;
        this.height = height || 0;
    }
    getShapeName() {
        return 'RectangleShape';
    }
    draw(context) {
        if (!this.width || !this.height) {
            return;
        }
        context.beginPath();
        Object.assign(context, this.options);
        context.rect(this.positionPoint.x, this.positionPoint.y, this.width, this.height);
        context.stroke();
        if (this.options.shouldFillShape) {
            context.fill();
        }
        context.closePath();
    }
    drawPreview(context) {
        this.positionPoint = new CanvasWhiteboardPoint(2, 2);
        this.width = context.canvas.width - 4;
        this.height = context.canvas.height - 4;
        this.draw(context);
    }
    onUpdateReceived(update) {
        this.width = update.x - this.positionPoint.x;
        this.height = update.y - this.positionPoint.y;
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicmVjdGFuZ2xlLXNoYXBlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vcHJvamVjdHMvbmcyLWNhbnZhcy13aGl0ZWJvYXJkL3NyYy9saWIvc2hhcGVzL3JlY3RhbmdsZS1zaGFwZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUscUJBQXFCLEVBQUUsTUFBTSwyQkFBMkIsQ0FBQztBQUVsRSxPQUFPLEVBQUUscUJBQXFCLEVBQUUsTUFBTSxrQ0FBa0MsQ0FBQztBQUd6RSxNQUFNLE9BQU8sY0FBZSxTQUFRLHFCQUFxQjtJQUl2RCxZQUFZLGFBQXFDLEVBQ3JDLE9BQXNDLEVBQ3RDLEtBQWMsRUFDZCxNQUFlO1FBQ3pCLEtBQUssQ0FBQyxhQUFhLEVBQUUsT0FBTyxDQUFDLENBQUM7UUFDOUIsSUFBSSxDQUFDLEtBQUssR0FBRyxLQUFLLElBQUksQ0FBQyxDQUFDO1FBQ3hCLElBQUksQ0FBQyxNQUFNLEdBQUcsTUFBTSxJQUFJLENBQUMsQ0FBQztJQUM1QixDQUFDO0lBRUQsWUFBWTtRQUNWLE9BQU8sZ0JBQWdCLENBQUM7SUFDMUIsQ0FBQztJQUVELElBQUksQ0FBQyxPQUFpQztRQUNwQyxJQUFJLENBQUMsSUFBSSxDQUFDLEtBQUssSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLEVBQUUsQ0FBQztZQUNoQyxPQUFPO1FBQ1QsQ0FBQztRQUNELE9BQU8sQ0FBQyxTQUFTLEVBQUUsQ0FBQztRQUVwQixNQUFNLENBQUMsTUFBTSxDQUFDLE9BQU8sRUFBRSxJQUFJLENBQUMsT0FBTyxDQUFDLENBQUM7UUFFckMsT0FBTyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsYUFBYSxDQUFDLENBQUMsRUFBRSxJQUFJLENBQUMsYUFBYSxDQUFDLENBQUMsRUFBRSxJQUFJLENBQUMsS0FBSyxFQUFFLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztRQUVsRixPQUFPLENBQUMsTUFBTSxFQUFFLENBQUM7UUFDakIsSUFBSSxJQUFJLENBQUMsT0FBTyxDQUFDLGVBQWUsRUFBRSxDQUFDO1lBQ2pDLE9BQU8sQ0FBQyxJQUFJLEVBQUUsQ0FBQztRQUNqQixDQUFDO1FBRUQsT0FBTyxDQUFDLFNBQVMsRUFBRSxDQUFDO0lBQ3RCLENBQUM7SUFFRCxXQUFXLENBQUMsT0FBaUM7UUFDM0MsSUFBSSxDQUFDLGFBQWEsR0FBRyxJQUFJLHFCQUFxQixDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQztRQUNyRCxJQUFJLENBQUMsS0FBSyxHQUFHLE9BQU8sQ0FBQyxNQUFNLENBQUMsS0FBSyxHQUFHLENBQUMsQ0FBQztRQUN0QyxJQUFJLENBQUMsTUFBTSxHQUFHLE9BQU8sQ0FBQyxNQUFNLENBQUMsTUFBTSxHQUFHLENBQUMsQ0FBQztRQUN4QyxJQUFJLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFDO0lBQ3JCLENBQUM7SUFFRCxnQkFBZ0IsQ0FBQyxNQUE4QjtRQUM3QyxJQUFJLENBQUMsS0FBSyxHQUFHLE1BQU0sQ0FBQyxDQUFDLEdBQUcsSUFBSSxDQUFDLGFBQWEsQ0FBQyxDQUFDLENBQUM7UUFDN0MsSUFBSSxDQUFDLE1BQU0sR0FBRyxNQUFNLENBQUMsQ0FBQyxHQUFHLElBQUksQ0FBQyxhQUFhLENBQUMsQ0FBQyxDQUFDO0lBQ2hELENBQUM7Q0FDRiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IENhbnZhc1doaXRlYm9hcmRTaGFwZSB9IGZyb20gJy4vY2FudmFzLXdoaXRlYm9hcmQtc2hhcGUnO1xuaW1wb3J0IHsgQ2FudmFzV2hpdGVib2FyZFNoYXBlT3B0aW9ucyB9IGZyb20gJy4vY2FudmFzLXdoaXRlYm9hcmQtc2hhcGUtb3B0aW9ucyc7XG5pbXBvcnQgeyBDYW52YXNXaGl0ZWJvYXJkUG9pbnQgfSBmcm9tICcuLi9jYW52YXMtd2hpdGVib2FyZC1wb2ludC5tb2RlbCc7XG5pbXBvcnQgeyBDYW52YXNXaGl0ZWJvYXJkVXBkYXRlIH0gZnJvbSAnLi4vY2FudmFzLXdoaXRlYm9hcmQtdXBkYXRlLm1vZGVsJztcblxuZXhwb3J0IGNsYXNzIFJlY3RhbmdsZVNoYXBlIGV4dGVuZHMgQ2FudmFzV2hpdGVib2FyZFNoYXBlIHtcbiAgd2lkdGg6IG51bWJlcjtcbiAgaGVpZ2h0OiBudW1iZXI7XG5cbiAgY29uc3RydWN0b3IocG9zaXRpb25Qb2ludD86IENhbnZhc1doaXRlYm9hcmRQb2ludCxcbiAgICAgICAgICAgICAgb3B0aW9ucz86IENhbnZhc1doaXRlYm9hcmRTaGFwZU9wdGlvbnMsXG4gICAgICAgICAgICAgIHdpZHRoPzogbnVtYmVyLFxuICAgICAgICAgICAgICBoZWlnaHQ/OiBudW1iZXIpIHtcbiAgICBzdXBlcihwb3NpdGlvblBvaW50LCBvcHRpb25zKTtcbiAgICB0aGlzLndpZHRoID0gd2lkdGggfHwgMDtcbiAgICB0aGlzLmhlaWdodCA9IGhlaWdodCB8fCAwO1xuICB9XG5cbiAgZ2V0U2hhcGVOYW1lKCk6IHN0cmluZyB7XG4gICAgcmV0dXJuICdSZWN0YW5nbGVTaGFwZSc7XG4gIH1cblxuICBkcmF3KGNvbnRleHQ6IENhbnZhc1JlbmRlcmluZ0NvbnRleHQyRCk6IHZvaWQge1xuICAgIGlmICghdGhpcy53aWR0aCB8fCAhdGhpcy5oZWlnaHQpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgY29udGV4dC5iZWdpblBhdGgoKTtcblxuICAgIE9iamVjdC5hc3NpZ24oY29udGV4dCwgdGhpcy5vcHRpb25zKTtcblxuICAgIGNvbnRleHQucmVjdCh0aGlzLnBvc2l0aW9uUG9pbnQueCwgdGhpcy5wb3NpdGlvblBvaW50LnksIHRoaXMud2lkdGgsIHRoaXMuaGVpZ2h0KTtcblxuICAgIGNvbnRleHQuc3Ryb2tlKCk7XG4gICAgaWYgKHRoaXMub3B0aW9ucy5zaG91bGRGaWxsU2hhcGUpIHtcbiAgICAgIGNvbnRleHQuZmlsbCgpO1xuICAgIH1cblxuICAgIGNvbnRleHQuY2xvc2VQYXRoKCk7XG4gIH1cblxuICBkcmF3UHJldmlldyhjb250ZXh0OiBDYW52YXNSZW5kZXJpbmdDb250ZXh0MkQpOiB2b2lkIHtcbiAgICB0aGlzLnBvc2l0aW9uUG9pbnQgPSBuZXcgQ2FudmFzV2hpdGVib2FyZFBvaW50KDIsIDIpO1xuICAgIHRoaXMud2lkdGggPSBjb250ZXh0LmNhbnZhcy53aWR0aCAtIDQ7XG4gICAgdGhpcy5oZWlnaHQgPSBjb250ZXh0LmNhbnZhcy5oZWlnaHQgLSA0O1xuICAgIHRoaXMuZHJhdyhjb250ZXh0KTtcbiAgfVxuXG4gIG9uVXBkYXRlUmVjZWl2ZWQodXBkYXRlOiBDYW52YXNXaGl0ZWJvYXJkVXBkYXRlKTogdm9pZCB7XG4gICAgdGhpcy53aWR0aCA9IHVwZGF0ZS54IC0gdGhpcy5wb3NpdGlvblBvaW50Lng7XG4gICAgdGhpcy5oZWlnaHQgPSB1cGRhdGUueSAtIHRoaXMucG9zaXRpb25Qb2ludC55O1xuICB9XG59XG4iXX0=